MVC란? (MVC: Model, View, Controller)
    MVC 패턴은 애플리케이션을 개발할 때 사용하는 디자인 패턴이다.
    애플리케이션의 개발 영역을 MVC(Model, View, Controller)로 구분하여 각 역할에 맞게 코드를 작성하는 개발 방식이다.
    MVC 패턴을 도입하면서 UI 영역과 도메인(비즈니스 로직) 영역으로 구분되어 서로에게 영향을 주지 않으면서 개발과 유지보수를 가능하게 되었다.

Model(모델)
    Spring MVC 기반의 웹 애플리케이션이 클라이언트의 요청을 전달받으면 요청 사항을 처리하기 위한 작업을 한다.
    처리한 작업의 결과 데이터를 클라이언트에게 응답을 돌려주어야 하는데, 이때 클라이언트에게 응답으로 돌려주는 작업의 처리 결과 데이터를 Model이라 한다.
    클라이언트의 요청 사항을 구체적으로 처리하는 영역을 서비스 계층(Service layer)라고 하며,
    요청 사항을 처리하기 위해 Java 코드로 구현한 것을 비즈니스 로직(Business Logic)이라 한다.
View(뷰)
    View는 Model을 이용하여 웹 브라우저와 같은 애플리케이션의 화면에 보이는 리소스(Resource)를 제공하는 역할을 한다.
    Spring MVC에는 다양한 View 기술이 포함되어 있다.

    HTML 페이지 출력
    PDF, Excel 등의 문서 형태로 출력
    XML, JSON 등 특정 형식의 포맷으로 변환
Controller(컨트롤러)
    컨트롤러는 클라이언트 측의 요청을 직접적으로 전달받는 엔드포인트(Endpoint)로써 Model과 View의 중간에서 상호작용을 해주는 역할을 한다.



@Controller
    @Controller 어노테이션은 해당 클래스가 controller 역할을 한다고 명시.
    @RequestMapping, @GetMapping 등등 URL 요청 어노테이션을 메소드에 지정하여 요청을 받는다

@Service
    @Component와 다른 기능은 없지만 비지니스 로직에 해당 어노테이션을 사용하여 명시적으로 비즈니스 로직을 가지고 있는 클래스임을 나타내게 해준다.

@Repository
    해당 클래스를 데이터 접근 계층으로 인식하며, 데이터 계층의 예외를 추상화하여 스프링 예외로 변환하여 던져준다.